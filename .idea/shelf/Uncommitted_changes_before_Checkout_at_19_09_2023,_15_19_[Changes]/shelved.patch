Index: Lecture1/Tasks/TestLongestCommonPrefix.go
===================================================================
diff --git a/Lecture1/Tasks/TestLongestCommonPrefix.go b/Lecture1/Tasks/TestLongestCommonPrefix.go
deleted file mode 100644
--- a/Lecture1/Tasks/TestLongestCommonPrefix.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,35 +0,0 @@
-package Tasks
-
-import "testing"
-
-func TestLongestCommonPrefix(t *testing.T) {
-	tests := []struct {
-		strs     []string
-		expected string
-		hasAns   bool
-	}{
-		{strs: []string{"flower", "flow", "flight"}, expected: "fl", hasAns: true},
-		{strs: []string{"dog", "racecar", "car"}, expected: "", hasAns: false},
-		{strs: []string{"abc", "abcdef", "abcde"}, expected: "abc", hasAns: true},
-		{strs: []string{"apple", "app", "ap"}, expected: "ap", hasAns: true},
-		{strs: []string{"abcd", "abcd", "abcd"}, expected: "abcd", hasAns: true},
-		{strs: []string{"", "xyz", "123"}, expected: "", hasAns: false},
-		{strs: []string{"", "", ""}, expected: "", hasAns: false},
-		{strs: []string{"abc"}, expected: "abc", hasAns: true},
-		{strs: []string{}, expected: "", hasAns: false},
-		{strs: []string{"abc", "def", "ghi"}, expected: "", hasAns: false},
-	}
-
-	for _, tc := range tests {
-		t.Run("", func(t *testing.T) {
-			result := LongestCommonPrefix(tc.strs)
-
-			switch {
-			case tc.hasAns && result == tc.expected:
-			case !tc.hasAns && result == "":
-			default:
-				t.Fatalf("Expected '%s' but got '%s'", tc.expected, result)
-			}
-		})
-	}
-}
Index: Lecture1/go.mod
===================================================================
diff --git a/Lecture1/go.mod b/Lecture1/go.mod
deleted file mode 100644
--- a/Lecture1/go.mod	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,3 +0,0 @@
-module Lecture1
-
-go 1.21.1
Index: Lecture1/Tasks/Sort.go
===================================================================
diff --git a/Lecture1/Tasks/Sort.go b/Lecture1/Tasks/Sort.go
deleted file mode 100644
--- a/Lecture1/Tasks/Sort.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,32 +0,0 @@
-package Tasks
-
-func HeapSort(arr []int) {
-	n := len(arr)
-	for i := n/2 - 1; i >= 0; i-- {
-		heapify(arr, i, n)
-	}
-
-	for i := n - 1; i >= 0; i-- {
-		arr[0], arr[i] = arr[i], arr[0]
-		heapify(arr, 0, i)
-	}
-}
-
-func heapify(arr []int, i, n int) {
-	largest := i
-	left := 2*i + 1
-	right := 2*i + 2
-
-	if left < n && arr[left] > arr[largest] {
-		largest = left
-	}
-
-	if right < n && arr[right] > arr[largest] {
-		largest = right
-	}
-
-	if largest != i {
-		arr[i], arr[largest] = arr[largest], arr[i]
-		heapify(arr, largest, n)
-	}
-}
Index: Lecture1/Tasks/TestHeapSort.go
===================================================================
diff --git a/Lecture1/Tasks/TestHeapSort.go b/Lecture1/Tasks/TestHeapSort.go
deleted file mode 100644
--- a/Lecture1/Tasks/TestHeapSort.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,33 +0,0 @@
-package Tasks
-
-import (
-	"reflect"
-	"testing"
-)
-
-func TestHeapSort(t *testing.T) {
-	tests := []struct {
-		input    []int
-		expected []int
-	}{
-		{[]int{5, 9, 3, 6, 2, 8, 1, 7}, []int{1, 2, 3, 5, 6, 7, 8, 9}},
-		{[]int{4, 3, 2, 1}, []int{1, 2, 3, 4}},
-		{[]int{1}, []int{1}},
-		{[]int{}, []int{}},
-		{[]int{5, 5, 5, 5}, []int{5, 5, 5, 5}},
-		{[]int{9, 7, 5, 3, 1}, []int{1, 3, 5, 7, 9}},
-		{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4, 5}},
-		{[]int{2, 1, 3, 5, 4}, []int{1, 2, 3, 4, 5}},
-		{[]int{1, 3, 5, 7, 9, 2, 4, 6}, []int{1, 2, 3, 4, 5, 6, 7, 9}},
-		{[]int{7, 3, 2, 8, 1, 6, 4, 5}, []int{1, 2, 3, 4, 5, 6, 7, 8}},
-	}
-
-	for _, test := range tests {
-		arr := make([]int, len(test.input))
-		copy(arr, test.input)
-		HeapSort(arr)
-		if !reflect.DeepEqual(arr, test.expected) {
-			t.Errorf("For input %v, expected %v, but got %v", test.input, test.expected, arr)
-		}
-	}
-}
Index: Lecture1/Tasks/longestCommonPrefix.go
===================================================================
diff --git a/Lecture1/Tasks/longestCommonPrefix.go b/Lecture1/Tasks/longestCommonPrefix.go
deleted file mode 100644
--- a/Lecture1/Tasks/longestCommonPrefix.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,17 +0,0 @@
-package Tasks
-
-func LongestCommonPrefix(strs []string) string {
-	if len(strs) == 0 {
-		return ""
-	}
-
-	prefix := strs[0]
-	for i := 1; i < len(strs); i++ {
-		j := 0
-		for ; j < len(prefix) && j < len(strs[i]) && prefix[j] == strs[i][j]; j++ {
-		}
-		prefix = prefix[:j]
-	}
-
-	return prefix
-}
Index: Lecture1/Tasks/twoSum.go
===================================================================
diff --git a/Lecture1/Tasks/twoSum.go b/Lecture1/Tasks/twoSum.go
deleted file mode 100644
--- a/Lecture1/Tasks/twoSum.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,27 +0,0 @@
-package Tasks
-
-// easiest sol
-// func twoSum(nums []int, target int) []int {
-//	for i, r := range nums {
-//		for j := i + 1; j < len(nums); j++ {
-//			if r+nums[j] == target && i < j {
-//				return []int{i, j}
-//			}
-//		}
-//	}
-//	return []int{}
-//}
-
-// best sol
-
-func TwoSum(nums []int, target int) []int {
-	m := make(map[int]int)
-	for i, n := range nums {
-		j, r := m[target-n]
-		if r {
-			return []int{j, i}
-		}
-		m[n] = i
-	}
-	return []int{}
-}
Index: Lecture1/Tasks/TestCompareTwoSlices.go
===================================================================
diff --git a/Lecture1/Tasks/TestCompareTwoSlices.go b/Lecture1/Tasks/TestCompareTwoSlices.go
deleted file mode 100644
--- a/Lecture1/Tasks/TestCompareTwoSlices.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,29 +0,0 @@
-package Tasks
-
-import "testing"
-
-func TestCompareTwoSlices(t *testing.T) {
-	tests := []struct {
-		s1       []int
-		s2       []int
-		expected bool
-	}{
-		{s1: []int{1, 2, 3}, s2: []int{1, 2, 3}, expected: true},
-		{s1: []int{1, 2, 3}, s2: []int{3, 2, 1}, expected: true},
-		{s1: []int{1, 2, 3}, s2: []int{1, 2, 4}, expected: false},
-		{s1: []int{1, 2, 3, 4}, s2: []int{1, 2, 3}, expected: false},
-		{s1: []int{}, s2: []int{}, expected: true},
-		{s1: []int{1, 2, 3}, s2: []int{4, 5, 6}, expected: false},
-		{s1: []int{1, 2, 3}, s2: []int{1, 2, 2}, expected: false},
-		{s1: []int{1, 2, 3}, s2: []int{1, 2, 3, 4}, expected: false},
-	}
-
-	for _, tc := range tests {
-		t.Run("", func(t *testing.T) {
-			result := CompareTwoSlices(tc.s1, tc.s2)
-			if result != tc.expected {
-				t.Fatalf("Expected %v but got %v", tc.expected, result)
-			}
-		})
-	}
-}
Index: Lecture1/Tasks/TestTwoSum.go
===================================================================
diff --git a/Lecture1/Tasks/TestTwoSum.go b/Lecture1/Tasks/TestTwoSum.go
deleted file mode 100644
--- a/Lecture1/Tasks/TestTwoSum.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,34 +0,0 @@
-package Tasks
-
-import "testing"
-
-func TestTwoSum(t *testing.T) {
-	tests := []struct {
-		nums   []int
-		target int
-		hasAns bool
-	}{
-		{nums: []int{1, 2, 3, 4, 5, 6, 7, 8, 9}, target: 3, hasAns: true},
-		{nums: []int{2, 7, 11, 15}, target: 9, hasAns: true},
-		{nums: []int{3, 2, 4}, target: 6, hasAns: true},
-		{nums: []int{3, 3}, target: 6, hasAns: true},
-		{nums: []int{9, 9, 9}, target: 2, hasAns: false},
-		{nums: []int{}, target: 5, hasAns: false},
-		{nums: []int{3, 5, 99, 4132, 432, 3245, 43, 23, 2}, target: 5, hasAns: true},
-	}
-
-	for _, tc := range tests {
-		got := TwoSum(tc.nums, tc.target)
-
-		switch {
-		case tc.hasAns && len(got) == 2:
-			if tc.target != (tc.nums[got[0]] + tc.nums[got[1]]) {
-				t.Fatalf("%v answer is incorrect", got)
-			}
-		case !tc.hasAns && len(got) == 0:
-		default:
-			t.Fatalf("%v answer is incorrect", got)
-		}
-
-	}
-}
Index: Lecture1/main/main.go
===================================================================
diff --git a/Lecture1/main/main.go b/Lecture1/main/main.go
deleted file mode 100644
--- a/Lecture1/main/main.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,12 +0,0 @@
-package main
-
-import (
-	"Lecture1/Tasks"
-	"fmt"
-)
-
-func main() {
-	nums := []int{1, 2, 3, 4, 5, 6}
-	target := 8
-	fmt.Println(Tasks.TwoSum(nums, target))
-}
Index: Lecture1/Tasks/compareTwoSlices.go
===================================================================
diff --git a/Lecture1/Tasks/compareTwoSlices.go b/Lecture1/Tasks/compareTwoSlices.go
deleted file mode 100644
--- a/Lecture1/Tasks/compareTwoSlices.go	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
+++ /dev/null	(revision b781ab94cd7a93bc56ccab1478b12dc7ec7d538c)
@@ -1,20 +0,0 @@
-package Tasks
-
-import "sort"
-
-func CompareTwoSlices(s1, s2 []int) bool {
-	if len(s1) != len(s2) {
-		return false
-	}
-
-	sort.Ints(s1)
-	sort.Ints(s2)
-
-	for i := 0; i < len(s1); i++ {
-		if s1[i] != s2[i] {
-			return false
-		}
-	}
-
-	return true
-}
