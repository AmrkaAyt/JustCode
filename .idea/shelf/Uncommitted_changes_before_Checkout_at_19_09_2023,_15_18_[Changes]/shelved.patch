Index: Lecture1/Tasks/compareTwoSlices.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Task1\n\nimport \"sort\"\n\nfunc CompareTwoSlices(s1, s2 []int) bool {\n\tif len(s1) != len(s2) {\n\t\treturn false\n\t}\n\n\tsort.Ints(s1)\n\tsort.Ints(s2)\n\n\tfor i := 0; i < len(s1); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Lecture1/Tasks/compareTwoSlices.go b/Lecture1/Tasks/compareTwoSlices.go
--- a/Lecture1/Tasks/compareTwoSlices.go	(revision bbca466fd43c470529f00b3ccd784e4219f9f6e7)
+++ b/Lecture1/Tasks/compareTwoSlices.go	(date 1695115133732)
@@ -1,4 +1,4 @@
-package Task1
+package Tasks
 
 import "sort"
 
Index: Lecture1/Tasks/longestCommonPrefix.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Task1\n\nfunc LongestCommonPrefix(strs []string) string {\n\tif len(strs) == 0 {\n\t\treturn \"\"\n\t}\n\n\tprefix := strs[0]\n\tfor i := 1; i < len(strs); i++ {\n\t\tj := 0\n\t\tfor ; j < len(prefix) && j < len(strs[i]) && prefix[j] == strs[i][j]; j++ {\n\t\t}\n\t\tprefix = prefix[:j]\n\t}\n\n\treturn prefix\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Lecture1/Tasks/longestCommonPrefix.go b/Lecture1/Tasks/longestCommonPrefix.go
--- a/Lecture1/Tasks/longestCommonPrefix.go	(revision bbca466fd43c470529f00b3ccd784e4219f9f6e7)
+++ b/Lecture1/Tasks/longestCommonPrefix.go	(date 1695115133720)
@@ -1,4 +1,4 @@
-package Task1
+package Tasks
 
 func LongestCommonPrefix(strs []string) string {
 	if len(strs) == 0 {
